(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{249:function(s,a,t){"use strict";t.r(a);var n=t(3),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"gcc-10-2-0-pass-1"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gcc-10-2-0-pass-1"}},[s._v("#")]),s._v(" GCC 10.2.0 (Pass 1)")]),s._v(" "),t("p",[s._v("GCC 패키지는 C, C++ 컴파일러를 포함하는 GNU 컴파일러 모음을 제곰합니다.")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("평균 빌드 시간")]),s._v(" "),t("th",[s._v("필요한 디스크 공간")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[s._v("11 SBU")]),s._v(" "),t("td",[s._v("3.7GB")])])])]),s._v(" "),t("h2",{attrs:{id:"크로스-gcc의-설치"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#크로스-gcc의-설치"}},[s._v("#")]),s._v(" 크로스 GCC의 설치")]),s._v(" "),t("p",[s._v("GCC의 첫 번째 빌드처럼, GMP, MPFR, MPC 패키지가 필요합니다. 각각의 패키지를 압축 해제한 다음 디렉토리 이름을 변경하십시오:")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("tar")]),s._v(" -xf "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("/mpfr-4.1.0.tar.xz\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("mv")]),s._v(" -v mpfr-4.1.0 mpfr\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("tar")]),s._v(" -xf "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("/gmp-6.2.1.tar.xz\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("mv")]),s._v(" -v gmp-6.2.1 gmp\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("tar")]),s._v(" -xf "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("/mpc-1.2.1.tar.gz\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("mv")]),s._v(" -v mpc-1.2.1 mpc\n")])])]),t("p",[s._v("x86_64 호스트에서는, 64비트용 기본 디렉토리의 이름을 "),t("code",[s._v("lib")]),s._v("로 설정하십시오:")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("uname")]),s._v(" -m"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v("\n  x86_64"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sed")]),s._v(" -e "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/m64=/s/lib64/lib/'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n        -i.orig gcc/config/i386/t-linux64\n "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("esac")]),s._v("\n")])])]),t("p",[s._v("별도의 빌드 디렉토리를 다시 만드십시오:")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" build\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" build\n")])])]),t("p",[s._v("libgcc가 posix 스레드 지원과 함께 빌드되도록 심볼릭 링크를 만드십시오:")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" -pv "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$LFS_TGT")]),s._v("/libgcc\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ln")]),s._v(" -sv "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("/"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("/"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("/libgcc/gthr-posix.h "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$LFS_TGT")]),s._v("/libgcc/gthr-default.h\n")])])]),t("p",[s._v("GCC 빌드를 시작하기 전에, 기본 최적화 플래그를 덮어쓰는 모든 환경 변수("),t("code",[s._v("CFLAGS")]),s._v(", "),t("code",[s._v("CXXFLAGS")]),s._v(", "),t("code",[s._v("LDFLAGS")]),s._v(", "),t("code",[s._v("MAKEFLAGS")]),s._v(" 등)를 삭제하십시오.")]),s._v(" "),t("p",[s._v("GCC 컴파일을 준비하십시오:")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("/configure                                       "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    --build"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("/config.guess"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("                     "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    --host"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$LFS_TGT")]),s._v("                                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    --prefix"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/usr                                  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("CC_FOR_TARGET")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$LFS_TGT")]),s._v("-gcc                     "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    --with-build-sysroot"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$LFS")]),s._v("                      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    --enable-initfini-array                        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    --disable-nls                                  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    --disable-multilib                             "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    --disable-decimal-float                        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    --disable-libatomic                            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    --disable-libgomp                              "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    --disable-libquadmath                          "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    --disable-libssp                               "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    --disable-libvtv                               "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    --disable-libstdcxx                            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    --enable-languages"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("c,c++\n")])])]),t("p",[t("strong",[s._v("새 configure 옵션의 의미")])]),s._v(" "),t("ul",[t("li",[t("p",[t("code",[s._v("--with-build-sysroot=$LFS")])]),s._v(" "),t("p",[s._v("일반적으로 "),t("code",[s._v("--host")]),s._v("를 사용하면 크로스 컴파일러가 GCC 빌드에 사용되고, 해당 컴파일러는 "),t("code",[s._v("$LFS")]),s._v("에서 헤더와 라이브러리를 찾아야 한다는 것을 알 수 있습니다. 그러나 GCC의 빌드 시스템은 이 위치를 알지 못하는 다른 도구를 사용합니다. 이 옵션은 호스트에서가 아니라 "),t("code",[s._v("$LFS")]),s._v("에서 필요한 파일을 찾도록 하는 데 필요합니다.")])]),s._v(" "),t("li",[t("p",[t("code",[s._v("--enable-initfini-array")])]),s._v(" "),t("p",[s._v("이 옵션은 네이티브 컴파일러를 빌드할 때 자동으로 사용됩니다. 하지만, 여기서는 크로스 컴파일러를 빌드하기 때문에, 이 옵션을 별도로 설정해야 합니다.")])])]),s._v(" "),t("p",[s._v("패키지를 컴파일하십시오:")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("make")]),s._v("\n")])])]),t("p",[s._v("패키지를 설치하십시오:")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("make")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("DESTDIR")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$LFS")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v("\n")])])]),t("p",[s._v("마지막으로, 유틸리티 심볼릭 링크를 생성하십시오. 많은 프로그램과 스크립트는 프로그램을 일반적으로 유지하고 GNU C 컴파일러가 없을 수도 있는 모든 유닉스 시스템에서 사용 가능하도록 "),t("code",[s._v("gcc")]),s._v(" 대신 "),t("code",[s._v("cc")]),s._v("를 실행합니다. "),t("code",[s._v("cc")]),s._v("를 실행하는 것을 시스템 관리자가  어떤 C 컴파일러를 설치할 지 자유롭게 결정할 수 있도록 합니다.")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ln")]),s._v(" -sv gcc "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$LFS")]),s._v("/usr/bin/cc\n")])])]),t("p",[s._v("이 패키지의 자세한 내용은 "),t("RouterLink",{attrs:{to:"/8/26.html"}},[s._v("여기")]),s._v("를 참고하십시오.")],1)])}),[],!1,null,null,null);a.default=e.exports}}]);