(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{407:function(_,v,e){"use strict";e.r(v);var s=e(26),c=Object(s.a)({},(function(){var _=this,v=_.$createElement,e=_._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[e("h1",{attrs:{id:"환경-구성"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#환경-구성"}},[_._v("#")]),_._v(" 환경 구성")]),_._v(" "),e("p",[e("code",[_._v("bash")]),_._v(" 셸의 시작 파일 2개를 생성해서 좋은 작업 환경을 생성하십시오. "),e("code",[_._v("lfs")]),_._v(" 유저로 로그인한 채로, 아래 명령어를 통해 "),e("code",[_._v(".bash_profile")]),_._v("을 생성하십시오:")]),_._v(" "),e("pre",[_._v('cat > ~/.bash_profile << "EOF"'),e("code",[_._v("\nexec env -i HOME=$HOME TERM=$TERM PS1='\\u:\\w\\$ ' /bin/bash\n")]),_._v("EOF\n")]),_._v(" "),e("p",[e("code",[_._v("lfs")]),_._v(" 유저로 로그인할 때 초기 셸은 일반적으로 호스트의 "),e("code",[_._v("/etc/profile")]),_._v("(아마도 일부 설정과 환경 변수가 포함되어 있을 것임)과 "),e("code",[_._v(".bash_profile")]),_._v("을 읽는 "),e("em",[_._v("로그인")]),_._v(" 셸입니다."),e("code",[_._v(".bash_profile")]),_._v(" 파일의 "),e("code",[_._v("exec env-i.../bin/bash")]),_._v(" 명령은 실행 중인 셸을 HOME, TERM 및 PS1 변수를 제외한 완전히 빈 환경의 새 셸로 바꿉니다. 이렇게 하면 호스트 시스템에서 원하지 않는 잠재적으로 위험한 환경 변수가 빌드 환경으로 누출되지 않습니다. 여기에서 사용되는 기술은 깨끗한 환경을 보장하는 목표를 달성합니다.")]),_._v(" "),e("p",[_._v("셸의 새 인스턴스는 "),e("code",[_._v("/etc/profile")]),_._v(" 또는 "),e("code",[_._v(".bash_profile")]),_._v(" 파일의 내용을 읽고 실행하지 않고 대신 "),e("code",[_._v(".bashrc")]),_._v(" 파일을 읽고 실행하는 "),e("em",[_._v("비 로그인")]),_._v(" 셸입니다. 지금 "),e("code",[_._v(".bashrc")]),_._v(" 파일을 생성합니다.")]),_._v(" "),e("pre",[_._v('cat > ~/.bashrc << "EOF"'),e("code",[_._v("\nset +h\numask 022\nLFS=/mnt/lfs\nLC_ALL=POSIX\nLFS_TGT=$(uname -m)-lfs-linux-gnu\nPATH=/usr/bin\nif [ ! -L /bin ]; then PATH=/bin:$PATH; fi\nPATH=$LFS/tools/bin:$PATH\nCONFIG_SITE=$LFS/usr/share/config.site\nexport LFS LC_ALL LFS_TGT PATH CONFIG_SITE\n")]),_._v("EOF\n")]),_._v(" "),e("p",[e("code",[_._v(".bashrc")]),e("strong",[_._v("의 설정의 의미")])]),_._v(" "),e("ul",[e("li",[e("p",[e("code",[_._v("set +h")])]),_._v(" "),e("p",[e("code",[_._v("set +h")]),_._v(" 명령은 "),e("code",[_._v("bash")]),_._v("의 해싱 기능을 끕니다. 해싱은 일반적으로 유용한 기능입니다. "),e("code",[_._v("bash")]),_._v("는 실행 파일의 전체 경로를 기억하기 위해 해시 테이블을 사용하여 "),e("code",[_._v("PATH")]),_._v("를 항상 검색하지 않고 동일한 실행 파일을 찾습니다. 그러나 새 프로그램은 설치되는 즉시 사용해야 합니다. 해시 함수를 끄면 셸은 프로그램을 실행할 때 항상 "),e("code",[_._v("PATH")]),_._v("를 검색합니다. 따라서 셸은 다른 위치에 있는 동일한 프로그램의 이전 버전을 기억하지 않고 사용 가능한 즉시 "),e("code",[_._v("$LFS/tools")]),_._v("에서 새로 컴파일된 도구를 찾습니다.")])]),_._v(" "),e("li",[e("p",[e("code",[_._v("umask 022")])]),_._v(" "),e("p",[_._v("사용자 파일 생성 마스크(umask)를 022로 설정하면 새로 만든 파일 및 디렉터리는 소유자만 쓸 수 있지만 누구나 읽을 수 있고 실행할 수 있습니다(기본 모드는 "),e("code",[_._v("open(2)")]),_._v(" 시스템 호출에서 사용된다고 가정할 때 새 파일은 권한 모드 644, 디렉토리는 권한 모드 755가 됩니다).")])]),_._v(" "),e("li",[e("p",[e("code",[_._v("LFS=/mnt/lfs")])]),_._v(" "),e("p",[e("code",[_._v("LFS")]),_._v(" 변수는 선택한 마운트 지점이어야 합니다.")])]),_._v(" "),e("li",[e("p",[e("code",[_._v("LC_ALL=POSIX")])]),_._v(" "),e("p",[e("code",[_._v("LC_ALL")]),_._v(" 변수는 특정 프로그램의 지역화를 제어하여 해당 프로그램의 메시지가 지정된 국가의 규약을 따르도록 합니다. "),e("code",[_._v("LC_ALL")]),_._v("을 "),e("code",[_._v("POSIX")]),_._v(" 또는 "),e("code",[_._v("C")]),_._v("(둘이 동일)로 설정하면 chroot 환경에서 모든 작업이 예상대로 작동합니다.")])]),_._v(" "),e("li",[e("p",[e("code",[_._v("LFS_TGT=$(uname -m)-lfs-linux-gnu")])]),_._v(" "),e("p",[e("code",[_._v("LFS_TGT")]),_._v(" 변수는 크로스 컴파일러와 링커를 빌드하고 우리의 임시 툴체인을 크로스 컴파일할 때 사용하기 위해 기본이 아니지만 호환 가능한 기계 설명을 설정합니다.")])]),_._v(" "),e("li",[e("p",[e("code",[_._v("PATH=/usr/bin")])]),_._v(" "),e("p",[_._v("많은 최신 리눅스 배포판이 "),e("code",[_._v("/bin")]),_._v("과 "),e("code",[_._v("/usr/bin")]),_._v("을 병합했습니다. 이 경우 표준 "),e("code",[_._v("PATH")]),_._v(" 변수는 6장 환경에 대해 "),e("code",[_._v("/usr/bin/")]),_._v("으로 설정하기만 하면 됩니다. 그렇지 않으면 다음 명령어가 PATH에 "),e("code",[_._v("/bin")]),_._v("을 추가합니다.")])]),_._v(" "),e("li",[e("p",[e("code",[_._v("if [ ! -L /bin ]; then PATH=/bin:$PATH; fi")])]),_._v(" "),e("p",[e("code",[_._v("/bin")]),_._v("이 심볼릭 링크가 아니라면, 이는 "),e("code",[_._v("PATH")]),_._v(" 변수에 추가됩니다.")])]),_._v(" "),e("li",[e("p",[e("code",[_._v("PATH=$LFS/tools/bin:$PATH")])]),_._v(" "),e("p",[_._v("표준 "),e("code",[_._v("PATH")]),_._v("보다 "),e("code",[_._v("$LFS/tools/bin")]),_._v("을 우선시함으로써 5장 시작 부분에 설치된 크로스 컴파일러는 설치 직후 셸에 의해 사용됩니다. 이렇게 하면 해시 해제와 함께 크로스 컴파일러 대신 호스트 컴파일러를 사용할 위험이 최소화됩니다.")])]),_._v(" "),e("li",[e("p",[e("code",[_._v("CONFIG_SITE=$LFS/usr/share/config.site")])]),_._v(" "),e("p",[_._v("5장 및 6장에서는 이 변수를 설정하지 않은 경우 "),e("code",[_._v("configure")]),_._v(" 스크립트가 "),e("code",[_._v("/usr/share/config.site")]),_._v("에서 일부 배포판 관련 구성 항목을 로드하려고 할 수 있습니다. 호스트에서 발생할 수 있는 오염을 방지하기 위해 재정의합니다.")])]),_._v(" "),e("li",[e("p",[e("code",[_._v("export ...")])]),_._v(" "),e("p",[_._v("설정한 모든 변수를 환경 변수에 등록합니다.")])])]),_._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[_._v("중요")]),_._v(" "),e("p",[_._v("여러 상용 배포판에서 "),e("code",[_._v("/etc/bash.bashrc")]),_._v("의 문서화되지 않은 인스턴스화를 "),e("code",[_._v("bash")]),_._v(" 초기화에 사용합니다. 이 파일에는 중요한 LFS 패키지 발드에 영향을 미칠 수 있는 방법으로 "),e("code",[_._v("lfs")]),_._v(" 사용자의 환경을 수정할 수 있는 가능성이 있습니다. "),e("code",[_._v("lfs")]),_._v(" 사용자의 환경이 깨끗한지 확인하려면 "),e("code",[_._v("/etc/bash.bashrc")]),_._v("가 있는지 확인하고 있는 경우 더미 파일로 변경합니다. "),e("code",[_._v("root")]),_._v(" 유저로 다음을 실행합니다.")]),_._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("[")]),_._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[_._v("!")]),_._v(" -e /etc/bash.bashrc "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v("]")]),_._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[_._v("||")]),_._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[_._v("mv")]),_._v(" -v /etc/bash.bashrc /etc/bash.bashrc.NOUSE\n")])])]),e("p",[_._v("7장에서 "),e("code",[_._v("lfs")]),_._v(" 유저의 사용이 끝난 다음 원한다면 "),e("code",[_._v("/etc/bash.bashrc")]),_._v("를 복구할 수 있습니다.")])]),_._v(" "),e("p",[_._v("마지막으로, 임시 도구를 빌드하는 데 필요한 모든 환경을 준비하려면, 방금 생성한 사용자 프로필을 반영하십시오:")]),_._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[_._v("source")]),_._v(" ~/.bash_profile\n")])])])])}),[],!1,null,null,null);v.default=c.exports}}]);