(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{236:function(s,a,t){"use strict";t.r(a);var n=t(3),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"gcc-10-2-0-pass-1"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gcc-10-2-0-pass-1"}},[s._v("#")]),s._v(" GCC 10.2.0 (Pass 1)")]),s._v(" "),t("p",[s._v("GCC 패키지는 C, C++ 컴파일러를 포함하는 GNU 컴파일러 모음을 제곰합니다.")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("평균 빌드 시간")]),s._v(" "),t("th",[s._v("필요한 디스크 공간")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[s._v("11 SBU")]),s._v(" "),t("td",[s._v("3.7GB")])])])]),s._v(" "),t("h2",{attrs:{id:"크로스-gcc의-설치"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#크로스-gcc의-설치"}},[s._v("#")]),s._v(" 크로스 GCC의 설치")]),s._v(" "),t("p",[s._v("GCC는 GMP, MPFR, MPC 패키지를 요구합니다. 이 패키지가 호스트 배포판에 없을 수 있기 때문에, 이는 GCC와 함께 빌드됩니다. 각각의 패키지를 GCC 소스 디렉토리로 압축 해제한 다음 디렉토리 이름을 변경해서 GCC 빌드 프로세스가 이를 자동으로 사용하도록 합니다:")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("tar")]),s._v(" -xf "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("/mpfr-4.1.0.tar.xz\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("mv")]),s._v(" -v mpfr-4.1.0 mpfr\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("tar")]),s._v(" -xf "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("/gmp-6.2.1.tar.xz\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("mv")]),s._v(" -v gmp-6.2.1 gmp\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("tar")]),s._v(" -xf "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("/mpc-1.2.1.tar.gz\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("mv")]),s._v(" -v mpc-1.2.1 mpc\n")])])]),t("p",[s._v("x86_64 호스트에서는, 64비트용 기본 디렉토리의 이름을 "),t("code",[s._v("lib")]),s._v("로 설정하십시오:")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("uname")]),s._v(" -m"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v("\n  x86_64"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sed")]),s._v(" -e "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/m64=/s/lib64/lib/'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n        -i.orig gcc/config/i386/t-linux64\n "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("esac")]),s._v("\n")])])]),t("p",[s._v("GCC 문서는 GCC를 별도의 빌드 디렉토리에서 빌드하는 것을 권장합니다:")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" build\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" build\n")])])]),t("p",[s._v("GCC 컴파일을 준비하십시오:")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("/configure                                       "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    --target"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$LFS_TGT")]),s._v("                              "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    --prefix"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$LFS")]),s._v("/tools                            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    --with-glibc-version"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.11")]),s._v("                      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    --with-sysroot"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$LFS")]),s._v("                            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    --with-newlib                                  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    --without-headers                              "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    --enable-initfini-array                        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    --disable-nls                                  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    --disable-shared                               "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    --disable-multilib                             "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    --disable-decimal-float                        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    --disable-threads                              "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    --disable-libatomic                            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    --disable-libgomp                              "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    --disable-libquadmath                          "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    --disable-libssp                               "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    --disable-libvtv                               "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    --disable-libstdcxx                            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    --enable-languages"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("c,c++\n")])])]),t("p",[t("strong",[s._v("configure 옵션의 의미")])]),s._v(" "),t("ul",[t("li",[t("p",[t("code",[s._v("--with-glibc-version=2.11")])]),s._v(" "),t("p",[s._v("이 옵션을 선택하면 패키지가 호스트의 glibc 버전과 호환됩니다. "),t("RouterLink",{attrs:{to:"/2/2.html"}},[s._v("호스트 시스템 요구 사항")]),s._v("에 지정된 최소 glibc 요구 사항으로 설정합니다.")],1)]),s._v(" "),t("li",[t("p",[t("code",[s._v("--with-newlib")])]),s._v(" "),t("p",[s._v("사용 가능한 C 라이브러리를 아직 사용할 수 없으므로 libgcc를 빌드할 때 필요한 inhibit_libc 상수가 정의됩니다. 이렇게 하면 libc가 필요한 모든 코드의 컴파일을 방지할 수 있습니다.")])]),s._v(" "),t("li",[t("p",[t("code",[s._v("--without-headers")])]),s._v(" "),t("p",[s._v("완전한 크로스 컴파일러를 만들 때 GCC는 대상 시스템과 호환되는 표준 헤더가 필요합니다. 우리의 목적상 이러한 헤더는 필요하지 않습니다. 이 옵션을 통해 GCC가 해당 항목을 찾지 않도록 합니다.")])]),s._v(" "),t("li",[t("p",[t("code",[s._v("--enable-initfini-array")])]),s._v(" "),t("p",[s._v("이 옵션은 필요하지만 크로스 컴파일러를 빌드할 때 감지되지 않는 몇몇 내부 데이터 구조의 사용을 강제합니다.")])]),s._v(" "),t("li",[t("p",[t("code",[s._v("--disable-shared")])]),s._v(" "),t("p",[s._v("이 옵션은 GCC에게 내부 라이브러리를 정적으로 링크하도록 강제합니다. 공유 라이브러리의 경우 대상 시스템에 아직 설치되지 않은 glibc가 필요하기 때문에 이 옵션이 필요합니다.")])]),s._v(" "),t("li",[t("p",[t("code",[s._v("--disable-multilib")])]),s._v(" "),t("p",[s._v("x86_64에서 LFS는 multilib 구성을 지원하지 않습니다. 이 옵션은 x86에서는 해롭지 않습니다.")])]),s._v(" "),t("li",[t("p",[t("code",[s._v("--disable-decimal-float, --disable-threads, --disable-libatomic, --disable-libgomp, --disable-libquadmath, --disable-libssp, --disable-libvtv, --disable-libstdcxx")])]),s._v(" "),t("p",[s._v("이러한 옵션은 각각 부동 소수점, 스레드, libatomic, libgomp, libssp, libvtv 및 C++ 표준 라이브러리에 대한 지원을 비활성화합니다. 이러한 기능은 크로스 컴파일러를 빌드할 때 컴파일하지 못하며 임시 libc를 크로스 컴파일하는 작업에는 필요하지 않습니다.")])]),s._v(" "),t("li",[t("p",[t("code",[s._v("--enable-languages=c,c++")])]),s._v(" "),t("p",[s._v("이 옵션은 C, C++ 컴파일러만 빌드되도록 합니다. 다른 언어는 필요하지 않습니다.")])])]),s._v(" "),t("p",[s._v("GCC를 컴파일하십시오:")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("make")]),s._v("\n")])])]),t("p",[s._v("패키지를 설치하십시오:")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("make")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v("\n")])])]),t("p",[s._v("이 GCC 빌드는 몇 개의 내부 시스템 헤더를 설치합니다. 일반적으로, 이 중 하나, "),t("code",[s._v("limits.h")]),s._v(" 헤더(이 경우 "),t("code",[s._v("$LFS/usr/include/limits.h")]),s._v(")는 해당되는 시스템의 "),t("code",[s._v("limits.h")]),s._v(" 헤더를 포함합니다. 하지만, GCC를 빌드할 때 "),t("code",[s._v("$LFS/usr/include/limits.h")]),s._v("가 존재하지 않기 때문에, 방금 설치된 내부 헤더는 독립적인 일부 파일이고 시스템 헤더의 확장 기능을 포함하지 않습니다. 이는 glibc를 발드하는 데 충분하지만, 나중에는 전체 내부 헤더가 필요합니다. GCC 빌드 시스템이 일반적인 경우에 진행하는 작업과 비슷한 명령어를 통해서 내부 헤더의 전체 버전을 생성하십시오:")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" gcc/limitx.h gcc/glimits.h gcc/limity.h "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("dirname")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("$(")]),s._v("$LFS_TGT-gcc -print-libgcc-file-name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("/install-tools/include/limits.h\n")])])]),t("p",[s._v("이 패키지의 자세한 내용은 "),t("RouterLink",{attrs:{to:"/8/26.html"}},[s._v("여기")]),s._v("를 참고하십시오.")],1)])}),[],!1,null,null,null);a.default=e.exports}}]);