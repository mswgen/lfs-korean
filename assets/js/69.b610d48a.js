(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{258:function(t,o,r){"use strict";r.r(o);var e=r(3),n=Object(e.a)({},(function(){var t=this,o=t.$createElement,r=t._self._c||o;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"개요"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#개요"}},[t._v("#")]),t._v(" 개요")]),t._v(" "),r("p",[t._v('이 장에서는 임시 시스템의 마지막을 빌드하는 방법을 보여 줍니다. 먼저, 다양한 패키지의 빌드 기계에서 필요한 도구, 그리고 테스트를 실행하는 데 필요한 세 개의 패키지로 구성됩니다. 이제 모든 순환 의존성이 해결되었으므로 실행 중인 커널을 제외하고 빌드에 사용되는 호스트 운영 체제를 완전히 격리한 "chroot" 환경을 사용할 수 있습니다.')]),t._v(" "),r("p",[t._v("격리된 환경을 올바르게 작동하려면 실행 중인 커널과 일부 통신을 설정해야 합니다. 이 작업은 chroot 환경에 들어갈 때 마운트해야 하는 이른바 "),r("em",[t._v("가상 커널 파일 시스템")]),t._v("을 통해 수행됩니다. "),r("code",[t._v("findmnt")]),t._v("를 통해 마운트되었는지 확인할 수 있습니다.")]),t._v(" "),r("p",[r("RouterLink",{attrs:{to:"/7/4.html"}},[t._v("7.4장 - Chroot 환경 진입")]),t._v("까지 명령은 "),r("code",[t._v("LFS")]),t._v(" 변수를 설정한 상태에서 "),r("code",[t._v("root")]),t._v(" 유저로 실행되어야 합니다. chroot에 진입한 후에는 다행히 LFS를 빌드한 시스템의 OS에 액세스하지 않고 모든 명령이 root로 실행됩니다. 잘못된 명령으로 전체 LFS 시스템을 파괴할 수 있으므로 주의해야 합니다.")],1)])}),[],!1,null,null,null);o.default=n.exports}}]);